{"version":3,"sources":["Infobox.js","Util.js","Map.js","Table.js","Linegraph.js","App.js","reportWebVitals.js","index.js"],"names":["Infobox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","uuidv4","replace","c","r","Math","random","toString","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","sqrt","Popup","style","backgroundImage","flag","UpdateMapCenter","useMap","useEffect","flyTo","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","Linegraph","useState","setData","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setInputCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b64195ca.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Infobox.css\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nfunction Infobox({ title, cases, active, isRed, total, ...props }) {\n    return (\n        <Card onClick={props.onClick} className={`infobox ${active && 'infobox--selected'} ${\n            isRed && \"infobox--red\"\n        }`}\n        >\n            <CardContent>\n                <Typography className=\"infobox__title\" color=\"textSecondary\">\n                    {title}\n                </Typography>\n                <h2 className={` ${!isRed && \"infobox__cases--green\"}`}>{cases}</h2>\n                <Typography className=\"infobox__total\" color=\"textSecondary\">\n                    {total} Total\n                    </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default Infobox\n","import { Circle, Popup } from \"react-leaflet\";\nimport numeral from \"numeral\";\nimport React from 'react'\n\nconst casesTypeColors = {\n    cases: {\n        hex: \"#CC1034\",\n        multiplier: 800,\n    },\n    recovered: {\n        hex: \"#7dd71d\",\n        multiplier: 1200,\n    },\n    deaths: {\n        hex: \"#fb4443\",\n        multiplier: 2000,\n    },\n};\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1))\n}\n\n\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n\nfunction uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n// Draw cicrlces on the map with interactive tooltips\nexport const showDataOnMap = (data, casesType = 'cases') => {\n    return (\n        data.map(country => (\n            <Circle\n                center={[country.countryInfo.lat, country.countryInfo.long]}\n                fillOpacity={0.4}\n                color={casesTypeColors[casesType].hex}\n                fillColor={casesTypeColors[casesType].hex}\n                radius={\n                    Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n                }\n                key={uuidv4()}\n            >\n                <Popup>\n                    <div className=\"info-container\">\n                        <div\n                            className=\"info-flag\"\n                            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n                        />\n                        <div className=\"info-name\">{country.country}</div>\n                        <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                        <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                        <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n                    </div>\n                </Popup>\n            </Circle>\n        ))\n    )\n}","import React, { Fragment, useEffect } from 'react';\nimport './Map.css';\nimport { MapContainer as LeafletMap, TileLayer, useMap } from \"react-leaflet\";\nimport { showDataOnMap } from './Util';\n\nfunction UpdateMapCenter({ center }) {\n    const map = useMap();\n    useEffect(() => {\n        map.flyTo(center)\n    }, [center])\n    return (<Fragment />)\n}\n\nfunction Map({ countries, casesType, center, zoom }) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom} >\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n\n                />\n                <UpdateMapCenter center={center} />\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    );\n}\n\nexport default Map","import React from 'react'\nimport numeral from 'numeral'\nimport './Table.css';\n\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n            {countries.map(({country, cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    <td>\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\n                    </td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table\n","import React, { useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\")\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    },\n};\nconst buildChartData = (data, casesType = 'cases') => {\n    const chartData = [];\n    let lastDataPoint;\n\n    for (let date in data.cases) {\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint\n            }\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData\n};\n\nfunction Linegraph( { casesType, ...props}) {\n    const [data, setData] = useState({}); \n\n    \n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n                .then((response) => response.json())\n                .then((data) => {\n                    console.log(data)\n                    let chartData = buildChartData(data, casesType);\n                    setData(chartData)\n                });\n        }\n        fetchData()\n        \n    }, [casesType]);\n\n    \n    return (\n        <div className={props.className}>\n            {data?.length > 0 && (\n                <Line\n                    options={options}\n                    data={{\n                        datasets: [\n                            {\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                                borderColor: \"#CC1034\",\n                                data: data,\n                            },\n                        ],\n                    }}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default Linegraph\n","import React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\"\nimport Infobox from './Infobox';\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport {sortData, prettyPrintStat} from \"./Util\";\nimport Linegraph from \"./Linegraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport './App.css';\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3)\n  const [mapCountries, setMapCountries] = useState([])\n  const [casesType, setCasesType] = useState('cases')\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    });\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          // console.log(data)\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n            \n          }));\n          const sortedData = sortData(data)\n          setTableData(sortedData)\n          setCountries(countries);\n          setMapCountries(data);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\nconsole.log(countryCode)\n    const url = \n      countryCode === \"worldwide\" \n      ? \"https://disease.sh/v3/covid-19/all\" \n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setInputCountry(countryCode);\n      setCountryInfo(data);\n      // console.log(data.countryInfo.lat)\n      if (countryCode === \"worldwide\") {\n        setMapCenter([34.80746, -40.4796])\n      } else {\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n      }\n\n      // setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n      setMapZoom(6)\n      // lat: 34.80746, lng: -40.4796\n     \n\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map(country => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <Infobox \n            isRed \n            active={casesType === 'cases'} \n            onClick={(e) => setCasesType('cases')} \n            title=\"Coronavirus Cases\" \n            cases={prettyPrintStat(countryInfo.todayCases)} \n            total={prettyPrintStat(countryInfo.cases)} \n          />\n          <Infobox \n            active={casesType === 'recovered'} \n            onClick={(e) => setCasesType('recovered')} \n            title=\"Recovered\" \n            cases={prettyPrintStat(countryInfo.todayRecovered)} \n            total={prettyPrintStat(countryInfo.recovered)} \n          />\n          <Infobox \n            isRed \n            active={casesType === 'deaths'} \n            onClick={(e) => setCasesType('deaths')} \n            title=\"Deaths\" \n            cases={prettyPrintStat(countryInfo.todayDeaths)} \n            total={prettyPrintStat(countryInfo.deaths)} \n          />\n        </div>\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n      </div>\n     <Card className=\"app__right\">\n       <CardContent>\n         <h3>Live Cases by Country</h3>\n         <Table countries={tableData} />\n              <h3>Worldwide new {casesType}</h3>\n        <Linegraph className=\"app__graph\" casesType={casesType}/>\n        </CardContent>\n     </Card>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}